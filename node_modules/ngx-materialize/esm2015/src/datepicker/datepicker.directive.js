/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectorRef, Directive, ElementRef, HostBinding, Input, Optional, Renderer } from '@angular/core';
import { NgControl } from '@angular/forms';
import { HandlePropChanges } from '../shared/index';
export class MzDatepickerDirective extends HandlePropChanges {
    /**
     * @param {?} ngControl
     * @param {?} changeDetectorRef
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(ngControl, changeDetectorRef, elementRef, renderer) {
        super();
        this.ngControl = ngControl;
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.renderer = renderer;
        // materialize uses pickadate.js to create the datepicker
        // complete list of options is available at the following address
        // http://amsul.ca/pickadate.js/date/#options
        this.options = {};
        this.isInitRound = true;
        this.stopChangePropagation = false;
    }
    /**
     * @return {?}
     */
    get format() {
        return this.options.format || this.options.formatSubmit || null;
    }
    /**
     * @return {?}
     */
    get formatSubmit() {
        return this.options.formatSubmit || this.options.format || null;
    }
    /**
     * @return {?}
     */
    get ngControlValue() {
        return this.ngControl.value === '' ? null : this.ngControl.value;
    }
    /**
     * @return {?}
     */
    get picker() {
        return this.inputElement.pickadate('picker');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.initDatepicker();
        this.initInputSubscription();
        this.handleProperties();
        this.isInitRound = false;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.inputValueSubscription) {
            this.inputValueSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            label: () => this.handleLabel(),
            options: () => this.handleOptions(),
            placeholder: () => this.handlePlaceholder(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.inputContainerElement = $(this.elementRef.nativeElement).parent('.input-field');
        this.inputElement = $(this.elementRef.nativeElement);
        this.labelElement = this.createLabelElement();
    }
    /**
     * @return {?}
     */
    initDatepicker() {
        // set default format/formatSubmit options
        if (this.format) {
            this.options.format = this.format;
        }
        if (this.formatSubmit) {
            this.options.formatSubmit = this.formatSubmit;
        }
        // extends onClose function to fix datepicker focus issue
        // https://github.com/Dogfalo/materialize/issues/2067#issuecomment-142107599
        const /** @type {?} */ onCloseFn = this.options && this.options.onClose || (() => { });
        this.options = Object.assign({}, this.options, {
            onClose: (event) => {
                onCloseFn(event);
                this.renderer.invokeElementMethod(document.activeElement, 'blur');
            },
        });
        this.renderer.invokeElementMethod(this.inputElement, 'pickadate', [this.options]);
        if (this.ngControl) {
            // set datepicker initial value according to ngControl
            this.picker.set('select', this.ngControlValue, { format: this.formatSubmit });
            // set ngControl value according to selected date in datepicker
            this.picker.on('set', () => {
                // handle stop propagation
                if (this.stopChangePropagation) {
                    this.stopChangePropagation = false;
                    return;
                }
                else {
                    this.stopChangePropagation = true;
                }
                // apply options.formatSubmit to ngControl value
                const /** @type {?} */ submitValue = this.formatSubmit
                    ? this.picker.get('select', this.formatSubmit)
                    : this.picker.get('value');
                this.ngControl.control.setValue(submitValue);
                // apply options.format to input text
                const /** @type {?} */ formatValue = this.format
                    ? this.picker.get('select', this.format)
                    : this.picker.get('value');
                this.inputElement.val(formatValue);
                // set label active status
                this.setLabelActive();
                // mark for change detection
                // fix form validation with ChangeDetectionStrategy.OnPush
                this.changeDetectorRef.markForCheck();
            });
        }
    }
    /**
     * @return {?}
     */
    initInputSubscription() {
        if (this.ngControl) {
            this.inputValueSubscription = this.ngControl.valueChanges.subscribe(() => {
                // handle stop propagation
                if (this.stopChangePropagation) {
                    this.stopChangePropagation = false;
                    return;
                }
                else {
                    this.stopChangePropagation = true;
                }
                // set selected date in datepicker according to ngControl value
                this.picker.set('select', this.ngControlValue, { format: this.formatSubmit });
                // set label active status
                this.setLabelActive();
            });
        }
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.inputElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.inputContainerElement.length === 0) {
            console.error('Input with mz-datepicker directive must be placed inside an [mz-datepicker-container] tag', this.inputElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleLabel() {
        this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
    }
    /**
     * @return {?}
     */
    handleOptions() {
        if (!this.isInitRound) {
            this.picker.set(this.options);
        }
    }
    /**
     * @return {?}
     */
    handlePlaceholder() {
        const /** @type {?} */ placeholder = !!this.placeholder ? this.placeholder : null;
        this.renderer.setElementAttribute(this.inputElement[0], 'placeholder', placeholder);
        // fix issue in IE where having a placeholder on input make control dirty and trigger validation
        // on page load... note that it still trigger validation on focus and would need a better fix
        // issue : https://github.com/angular/angular/issues/15299
        // workaround : https://stackoverflow.com/a/44967245/5583283
        if (this.ngControl) {
            setTimeout(() => this.ngControl.control.markAsPristine());
        }
        this.setLabelActive();
    }
    /**
     * @return {?}
     */
    setLabelActive() {
        // need setTimeout otherwise it wont make label float in some circonstances (forcing validation for example)
        setTimeout(() => {
            const /** @type {?} */ inputValue = (/** @type {?} */ (this.inputElement[0])).value;
            const /** @type {?} */ isActive = !!this.placeholder || !!inputValue;
            this.renderer.setElementClass(this.labelElement[0], 'active', isActive);
        });
    }
}
MzDatepickerDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[mzDatepicker], input[mz-datepicker]',
            },] },
];
/** @nocollapse */
MzDatepickerDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional },] },
    { type: ChangeDetectorRef, },
    { type: ElementRef, },
    { type: Renderer, },
];
MzDatepickerDirective.propDecorators = {
    "true": [{ type: HostBinding, args: ['class.datepicker',] },],
    "id": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "label": [{ type: Input },],
    "options": [{ type: Input },],
};
function MzDatepickerDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    MzDatepickerDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    MzDatepickerDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    MzDatepickerDirective.propDecorators;
    /** @type {?} */
    MzDatepickerDirective.prototype.true;
    /** @type {?} */
    MzDatepickerDirective.prototype.id;
    /** @type {?} */
    MzDatepickerDirective.prototype.placeholder;
    /** @type {?} */
    MzDatepickerDirective.prototype.label;
    /** @type {?} */
    MzDatepickerDirective.prototype.options;
    /** @type {?} */
    MzDatepickerDirective.prototype.inputElement;
    /** @type {?} */
    MzDatepickerDirective.prototype.inputContainerElement;
    /** @type {?} */
    MzDatepickerDirective.prototype.inputValueSubscription;
    /** @type {?} */
    MzDatepickerDirective.prototype.isInitRound;
    /** @type {?} */
    MzDatepickerDirective.prototype.labelElement;
    /** @type {?} */
    MzDatepickerDirective.prototype.stopChangePropagation;
    /** @type {?} */
    MzDatepickerDirective.prototype.ngControl;
    /** @type {?} */
    MzDatepickerDirective.prototype.changeDetectorRef;
    /** @type {?} */
    MzDatepickerDirective.prototype.elementRef;
    /** @type {?} */
    MzDatepickerDirective.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,