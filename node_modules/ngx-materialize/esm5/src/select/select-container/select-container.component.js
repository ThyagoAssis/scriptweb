/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ContentChild, Input } from '@angular/core';
import { NgControl } from '@angular/forms';
import { MzValidationComponent } from '../../validation/validation.component';
import { MzSelectDirective } from '../select.directive';
var MzSelectContainerComponent = /** @class */ (function () {
    function MzSelectContainerComponent() {
    }
    /**
     * @return {?}
     */
    MzSelectContainerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initControlSubscription();
        this.initSelectSubscription();
    };
    /**
     * @return {?}
     */
    MzSelectContainerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeControlSubscription();
        this.removeSelectSubscription();
    };
    /**
     * @return {?}
     */
    MzSelectContainerComponent.prototype.initControlSubscription = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.ngControl) {
            this.mzSelectDirective.disabled = this.ngControl.control.disabled;
            this.statusChangesSubscription = this.ngControl.control.statusChanges.subscribe(function (status) {
                // to handle enabling/disabling formControl
                var /** @type {?} */ disabled = status === 'DISABLED';
                if (disabled !== _this.mzSelectDirective.disabled) {
                    _this.mzSelectDirective.disabled = disabled;
                    _this.mzSelectDirective.handleDisabled();
                }
            });
            this.selectValueSubscription = this.ngControl.valueChanges.subscribe(function (value) {
                // to synchronize input and select when value changes programmatically
                var /** @type {?} */ isDropdownOpen = _this.mzSelectDirective.inputElement.hasClass('active');
                var /** @type {?} */ inputValue = _this.mzSelectDirective.inputElement.val();
                var /** @type {?} */ options = _this.mzSelectDirective.selectElement.children('option');
                var /** @type {?} */ selectedOptions = options.filter('option:selected').toArray();
                var /** @type {?} */ disabledOptions = options.filter(':disabled').toArray();
                var /** @type {?} */ selectedOptionText = selectedOptions.length === 0
                    ? disabledOptions.map(function (option) { return option.textContent; })[0]
                    : selectedOptions.map(function (option) { return option.textContent; }).join(', ');
                if (inputValue !== selectedOptionText && !isDropdownOpen) {
                    _this.mzSelectDirective.updateMaterialSelect();
                }
            });
        }
    };
    /**
     * @return {?}
     */
    MzSelectContainerComponent.prototype.initSelectSubscription = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.mzSelectDirective) {
            this.mzSelectDirective.update
                .subscribe(function () { return _this.registerOnBlur(); })
                .next();
        }
    };
    /**
     * @return {?}
     */
    MzSelectContainerComponent.prototype.registerOnBlur = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.mzSelectDirective.inputElement.on('blur', function () {
            if (_this.ngControl) {
                _this.ngControl.control.markAsTouched();
            }
            if (_this.mzValidationComponent) {
                _this.mzValidationComponent.setValidationState();
            }
        });
    };
    /**
     * @return {?}
     */
    MzSelectContainerComponent.prototype.removeControlSubscription = /**
     * @return {?}
     */
    function () {
        if (this.mzSelectDirective) {
            this.mzSelectDirective.update.unsubscribe();
            this.mzSelectDirective.inputElement.off();
        }
    };
    /**
     * @return {?}
     */
    MzSelectContainerComponent.prototype.removeSelectSubscription = /**
     * @return {?}
     */
    function () {
        if (this.statusChangesSubscription) {
            this.statusChangesSubscription.unsubscribe();
        }
        if (this.selectValueSubscription) {
            this.selectValueSubscription.unsubscribe();
        }
    };
    MzSelectContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mz-select-container',
                    template: "<div\n  class=\"input-field\"\n  [class.inline]=\"inline\"\n>\n  <ng-content></ng-content>\n</div>",
                    styles: [".input-field:not(.inline){display:block}/deep/ .input-field .dropdown-content [type=checkbox]+label{top:-11px}"],
                },] },
    ];
    /** @nocollapse */
    MzSelectContainerComponent.propDecorators = {
        "inline": [{ type: Input },],
        "mzSelectDirective": [{ type: ContentChild, args: [MzSelectDirective,] },],
        "mzValidationComponent": [{ type: ContentChild, args: [MzValidationComponent,] },],
        "ngControl": [{ type: ContentChild, args: [NgControl,] },],
    };
    return MzSelectContainerComponent;
}());
export { MzSelectContainerComponent };
function MzSelectContainerComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    MzSelectContainerComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    MzSelectContainerComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    MzSelectContainerComponent.propDecorators;
    /** @type {?} */
    MzSelectContainerComponent.prototype.inline;
    /** @type {?} */
    MzSelectContainerComponent.prototype.mzSelectDirective;
    /** @type {?} */
    MzSelectContainerComponent.prototype.mzValidationComponent;
    /** @type {?} */
    MzSelectContainerComponent.prototype.ngControl;
    /** @type {?} */
    MzSelectContainerComponent.prototype.selectValueSubscription;
    /** @type {?} */
    MzSelectContainerComponent.prototype.statusChangesSubscription;
}

//# sourceMappingURL=data:application/json;base64,