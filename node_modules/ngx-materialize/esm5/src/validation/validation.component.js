/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ComponentFactoryResolver, ElementRef, HostBinding, HostListener, Input, Renderer, ViewContainerRef, ViewEncapsulation, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { ErrorMessageResource, MzErrorMessageComponent } from './error-message/index';
var MzValidationComponent = /** @class */ (function () {
    function MzValidationComponent(elementRef, resolver, viewContainerRef, ngControl, renderer) {
        this.elementRef = elementRef;
        this.resolver = resolver;
        this.viewContainerRef = viewContainerRef;
        this.ngControl = ngControl;
        this.renderer = renderer;
        this.errorMessageComponent = null;
        this._formControlDisabled = false;
        this._required = false;
    }
    Object.defineProperty(MzValidationComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () { return this._required; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._required = (value != null && "" + value !== 'false'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MzValidationComponent.prototype, "formControlDisabled", {
        get: /**
         * @return {?}
         */
        function () { return this._formControlDisabled; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._formControlDisabled = value;
            if (this._formControlDisabled) {
                this.ngControl.control.disable();
            }
            else {
                this.ngControl.control.enable();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MzValidationComponent.prototype, "elementToAddValidation", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isNativeSelectElement
                ? this.inputSelectDropdown
                : this.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MzValidationComponent.prototype, "inputSelectDropdown", {
        get: /**
         * @return {?}
         */
        function () {
            return this.nativeElement.siblings('input.select-dropdown');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MzValidationComponent.prototype, "isNativeSelectElement", {
        get: /**
         * @return {?}
         */
        function () {
            return this.nativeElement[0].nodeName === 'SELECT';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} target
     * @return {?}
     */
    MzValidationComponent.prototype.onFocusOut = /**
     * @param {?} target
     * @return {?}
     */
    function (target) {
        this.ngControl.control.markAsTouched();
        this.setValidationState();
    };
    /**
     * @return {?}
     */
    MzValidationComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initElements();
        this.initErrorMessageComponent();
        this.subscribeStatusChanges();
    };
    /**
     * @return {?}
     */
    MzValidationComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.statusChangesSubscription.unsubscribe();
        this.errorMessageComponent.destroy();
    };
    /**
     * @param {?} element
     * @return {?}
     */
    MzValidationComponent.prototype.clearValidationState = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        this.renderer.setElementClass(element[0], 'valid', false);
        this.renderer.setElementClass(element[0], 'invalid', false);
    };
    /**
     * @return {?}
     */
    MzValidationComponent.prototype.createRequiredSpanElement = /**
     * @return {?}
     */
    function () {
        if (this.required && this.labelElement) {
            var /** @type {?} */ spanElement = document.createElement('span');
            spanElement.setAttribute('class', 'placeholder-required');
            spanElement.textContent = ' *';
            this.renderer.invokeElementMethod(this.labelElement, 'appendChild', [spanElement]);
        }
    };
    /**
     * @return {?}
     */
    MzValidationComponent.prototype.initElements = /**
     * @return {?}
     */
    function () {
        this.labelElement = $('label[for="' + this.id + '"]')[0];
        this.nativeElement = $(this.elementRef.nativeElement);
        this.createRequiredSpanElement();
    };
    /**
     * @return {?}
     */
    MzValidationComponent.prototype.initErrorMessageComponent = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ errorMessageFactory = this.resolver.resolveComponentFactory(MzErrorMessageComponent);
        this.errorMessageComponent = this.viewContainerRef.createComponent(errorMessageFactory);
        this.errorMessageComponent.instance.errorMessageResource = this.errorMessageResource;
        this.errorMessageComponent.instance.control = this.ngControl.control;
        this.errorMessageComponent.changeDetectorRef.detectChanges();
        var /** @type {?} */ errorMessage = this.nativeElement.parent().children('mz-error-message');
        this.renderer.invokeElementMethod(errorMessage, 'insertAfter', [this.labelElement]);
    };
    /**
     * @return {?}
     */
    MzValidationComponent.prototype.setValidationState = /**
     * @return {?}
     */
    function () {
        // to handle reset form
        if (this.ngControl.control.untouched && this.ngControl.control.pristine) {
            this.clearValidationState(this.elementToAddValidation);
            return;
        }
        // to handle field validity
        if (this.ngControl.control.enabled) {
            if (this.ngControl.control.valid) {
                this.renderer.setElementClass(this.elementToAddValidation[0], 'valid', true);
                this.renderer.setElementClass(this.elementToAddValidation[0], 'invalid', false);
            }
            else {
                this.renderer.setElementClass(this.elementToAddValidation[0], 'valid', false);
                this.renderer.setElementClass(this.elementToAddValidation[0], 'invalid', true);
            }
        }
        else {
            this.clearValidationState(this.elementToAddValidation);
        }
    };
    /**
     * @return {?}
     */
    MzValidationComponent.prototype.subscribeStatusChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.statusChangesSubscription = this.ngControl.control.statusChanges.subscribe(function (status) {
            // TODO Find a better way to handle validation after the form subscription. (see demo form-validation)
            // wait for the valueChanges method from FormGroup to have been triggered before handling the validation state
            // /!\ race condition warning /!\
            setTimeout(function () { return _this.setValidationState(); });
        });
    };
    MzValidationComponent.decorators = [
        { type: Component, args: [{
                    encapsulation: ViewEncapsulation.None,
                    selector: 'mz-validation, [mz-validation], [mzValidation]',
                    template: "<ng-content></ng-content>",
                    styles: [".select-wrapper input.select-dropdown.invalid,textarea.ng-invalid.ng-touched:focus{border-bottom:1px solid #f44336;box-shadow:0 1px 0 0 #f44336}.select-wrapper input.select-dropdown.valid{border-bottom:1px solid #4caf50;box-shadow:0 1px 0 0 #4caf50}input:not([type=checkbox]):focus+label.active span.placeholder-required,textarea:focus+label.active span.placeholder-required{color:#f44336}"],
                },] },
    ];
    /** @nocollapse */
    MzValidationComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ComponentFactoryResolver, },
        { type: ViewContainerRef, },
        { type: NgControl, },
        { type: Renderer, },
    ]; };
    MzValidationComponent.propDecorators = {
        "id": [{ type: Input },],
        "errorMessageResource": [{ type: Input },],
        "required": [{ type: HostBinding, args: ['attr.required',] }, { type: Input },],
        "formControlDisabled": [{ type: Input },],
        "onFocusOut": [{ type: HostListener, args: ['focusout', ['$event.target'],] },],
    };
    return MzValidationComponent;
}());
export { MzValidationComponent };
function MzValidationComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    MzValidationComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    MzValidationComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    MzValidationComponent.propDecorators;
    /** @type {?} */
    MzValidationComponent.prototype.errorMessageComponent;
    /** @type {?} */
    MzValidationComponent.prototype.labelElement;
    /** @type {?} */
    MzValidationComponent.prototype.nativeElement;
    /** @type {?} */
    MzValidationComponent.prototype.statusChangesSubscription;
    /** @type {?} */
    MzValidationComponent.prototype.id;
    /** @type {?} */
    MzValidationComponent.prototype.errorMessageResource;
    /** @type {?} */
    MzValidationComponent.prototype._formControlDisabled;
    /** @type {?} */
    MzValidationComponent.prototype._required;
    /** @type {?} */
    MzValidationComponent.prototype.elementRef;
    /** @type {?} */
    MzValidationComponent.prototype.resolver;
    /** @type {?} */
    MzValidationComponent.prototype.viewContainerRef;
    /** @type {?} */
    MzValidationComponent.prototype.ngControl;
    /** @type {?} */
    MzValidationComponent.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,