/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Optional, Renderer } from '@angular/core';
import { NgControl } from '@angular/forms';
import { interval } from 'rxjs';
import { first, skipWhile } from 'rxjs/operators';
import { HandlePropChanges } from '../shared/index';
var MzInputDirective = /** @class */ (function (_super) {
    tslib_1.__extends(MzInputDirective, _super);
    function MzInputDirective(ngControl, elementRef, renderer) {
        var _this = _super.call(this) || this;
        _this.ngControl = ngControl;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        return _this;
    }
    /**
     * @return {?}
     */
    MzInputDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initHandlers();
        this.initElements();
        this.initInputSubscription();
        this.handleProperties();
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.inputValueSubscription) {
            this.inputValueSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.initHandlers = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.handlers = {
            autocomplete: function () { return _this.handleAutocomplete(); },
            dataError: function () { return _this.handleDataError(); },
            dataSuccess: function () { return _this.handleDataSuccess(); },
            label: function () { return _this.handleLabel(); },
            length: function () { return _this.handleLength(); },
            placeholder: function () { return _this.handlePlaceholder(); },
            validate: function () { return _this.handleValidate(); },
        };
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.initElements = /**
     * @return {?}
     */
    function () {
        this.inputElement = $(this.elementRef.nativeElement);
        this.inputContainerElement = $(this.elementRef.nativeElement).parent('.input-field');
        this.labelElement = this.createLabelElement();
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.initInputSubscription = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.ngControl) {
            this.inputValueSubscription = this.ngControl.valueChanges.subscribe(function () { return _this.setLabelActive(); });
        }
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.createLabelElement = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.inputElement, 'after', [labelElement]);
        return $(labelElement);
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.handleProperties = /**
     * @return {?}
     */
    function () {
        if (this.inputContainerElement.length === 0) {
            console.error('Input with mz-input directive must be placed inside an [mz-input-container] tag', this.inputElement);
            return;
        }
        _super.prototype.executePropHandlers.call(this);
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.handleAutocomplete = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ isAutocomplete = this.autocomplete != null
            && this.autocomplete.data != null
            && Object.keys(this.autocomplete.data).length > 0;
        this.renderer.setElementClass(this.inputElement[0], 'autocomplete', isAutocomplete);
        if (this.autocomplete != null) {
            // wait until autocomplete is defined before to invoke
            // see issue: https://github.com/Dogfalo/materialize/issues/4401
            interval(100)
                .pipe(skipWhile(function () { return !_this.inputElement['autocomplete']; }), first())
                .subscribe(function () { return _this.renderer.invokeElementMethod(_this.inputElement, 'autocomplete', [_this.autocomplete]); });
        }
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.handleDataError = /**
     * @return {?}
     */
    function () {
        this.renderer.setElementAttribute(this.labelElement[0], 'data-error', this.dataError);
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.handleDataSuccess = /**
     * @return {?}
     */
    function () {
        this.renderer.setElementAttribute(this.labelElement[0], 'data-success', this.dataSuccess);
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.handleLabel = /**
     * @return {?}
     */
    function () {
        this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.handleLength = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ length = this.length ? this.length.toString() : null;
        this.renderer.setElementAttribute(this.inputElement[0], 'data-length', length);
        if (length) {
            this.setCharacterCount();
        }
        else {
            this.removeCharacterCount();
        }
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.handlePlaceholder = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ placeholder = !!this.placeholder ? this.placeholder : null;
        this.renderer.setElementAttribute(this.inputElement[0], 'placeholder', placeholder);
        // fix issue in IE where having a placeholder on input make control dirty
        // note that it still trigger validation on focus but this is better than nothing
        // issue : https://github.com/angular/angular/issues/15299
        // workaround : https://stackoverflow.com/a/44967245/5583283
        if (this.ngControl) {
            setTimeout(function () { return _this.ngControl.control.markAsPristine(); });
        }
        this.setLabelActive();
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.handleValidate = /**
     * @return {?}
     */
    function () {
        this.renderer.setElementClass(this.inputElement[0], 'validate', this.validate);
        if (this.validate) {
            // force validation
            this.renderer.invokeElementMethod(this.inputElement, 'trigger', ['blur']);
        }
        else {
            this.removeValidationClasses();
        }
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.setCharacterCount = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.renderer.invokeElementMethod(this.inputElement, 'characterCounter');
        // force validation
        // need setTimeout otherwise it wont trigger validation right away
        setTimeout(function () {
            _this.renderer.invokeElementMethod(_this.inputElement, 'trigger', ['input']);
            _this.renderer.invokeElementMethod(_this.inputElement, 'trigger', ['blur']);
        });
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.setLabelActive = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // need setTimeout otherwise it wont make label float in some circonstances
        // for example: forcing validation for example, reseting form programmaticaly, ...
        setTimeout(function () {
            var /** @type {?} */ inputValue = (/** @type {?} */ (_this.inputElement[0])).value;
            var /** @type {?} */ isActive = !!_this.placeholder || !!inputValue;
            _this.renderer.setElementClass(_this.labelElement[0], 'active', isActive);
        });
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.removeCharacterCount = /**
     * @return {?}
     */
    function () {
        this.renderer.invokeElementMethod(this.inputElement.siblings('.character-counter'), 'remove');
        this.removeValidationClasses();
    };
    /**
     * @return {?}
     */
    MzInputDirective.prototype.removeValidationClasses = /**
     * @return {?}
     */
    function () {
        // reset valid/invalid state
        this.renderer.setElementClass(this.inputElement[0], 'invalid', false);
        this.renderer.setElementClass(this.inputElement[0], 'valid', false);
    };
    MzInputDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[mzInput], input[mz-input]',
                },] },
    ];
    /** @nocollapse */
    MzInputDirective.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional },] },
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    MzInputDirective.propDecorators = {
        "id": [{ type: Input },],
        "placeholder": [{ type: Input },],
        "autocomplete": [{ type: Input },],
        "dataError": [{ type: Input },],
        "dataSuccess": [{ type: Input },],
        "label": [{ type: Input },],
        "length": [{ type: Input },],
        "validate": [{ type: Input },],
    };
    return MzInputDirective;
}(HandlePropChanges));
export { MzInputDirective };
function MzInputDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    MzInputDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    MzInputDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    MzInputDirective.propDecorators;
    /** @type {?} */
    MzInputDirective.prototype.id;
    /** @type {?} */
    MzInputDirective.prototype.placeholder;
    /** @type {?} */
    MzInputDirective.prototype.autocomplete;
    /** @type {?} */
    MzInputDirective.prototype.dataError;
    /** @type {?} */
    MzInputDirective.prototype.dataSuccess;
    /** @type {?} */
    MzInputDirective.prototype.label;
    /** @type {?} */
    MzInputDirective.prototype.length;
    /** @type {?} */
    MzInputDirective.prototype.validate;
    /** @type {?} */
    MzInputDirective.prototype.inputElement;
    /** @type {?} */
    MzInputDirective.prototype.inputContainerElement;
    /** @type {?} */
    MzInputDirective.prototype.inputValueSubscription;
    /** @type {?} */
    MzInputDirective.prototype.labelElement;
    /** @type {?} */
    MzInputDirective.prototype.ngControl;
    /** @type {?} */
    MzInputDirective.prototype.elementRef;
    /** @type {?} */
    MzInputDirective.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,